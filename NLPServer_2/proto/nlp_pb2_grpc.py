# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

import nlp_pb2 as nlp__pb2


class NlpStub(object):
  """The nlp service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.WordSegment = channel.unary_unary(
        '/nlp.Nlp/WordSegment',
        request_serializer=nlp__pb2.SentenceRequest.SerializeToString,
        response_deserializer=nlp__pb2.SentenceReply.FromString,
        )
    self.PosTag = channel.unary_unary(
        '/nlp.Nlp/PosTag',
        request_serializer=nlp__pb2.SentenceRequest.SerializeToString,
        response_deserializer=nlp__pb2.SentenceReply.FromString,
        )
    self.NamedIdentityRecognize = channel.unary_unary(
        '/nlp.Nlp/NamedIdentityRecognize',
        request_serializer=nlp__pb2.SentenceRequest.SerializeToString,
        response_deserializer=nlp__pb2.SentenceReply.FromString,
        )
    self.OrgMatcher = channel.unary_unary(
        '/nlp.Nlp/OrgMatcher',
        request_serializer=nlp__pb2.SentenceRequest.SerializeToString,
        response_deserializer=nlp__pb2.SentenceReply.FromString,
        )
    self.Dependency = channel.unary_unary(
        '/nlp.Nlp/Dependency',
        request_serializer=nlp__pb2.SentenceRequest.SerializeToString,
        response_deserializer=nlp__pb2.SentenceReply.FromString,
        )
    self.EntityLink = channel.unary_unary(
        '/nlp.Nlp/EntityLink',
        request_serializer=nlp__pb2.SentenceRequest.SerializeToString,
        response_deserializer=nlp__pb2.SentenceReply.FromString,
        )
    self.CompanySegment = channel.unary_unary(
        '/nlp.Nlp/CompanySegment',
        request_serializer=nlp__pb2.SentenceRequest.SerializeToString,
        response_deserializer=nlp__pb2.SentenceReply.FromString,
        )
    self.Bid = channel.unary_unary(
        '/nlp.Nlp/Bid',
        request_serializer=nlp__pb2.SentenceRequest2.SerializeToString,
        response_deserializer=nlp__pb2.SentenceReply.FromString,
        )
    self.EventExtract = channel.unary_unary(
        '/nlp.Nlp/EventExtract',
        request_serializer=nlp__pb2.SentenceRequest2.SerializeToString,
        response_deserializer=nlp__pb2.SentenceReply.FromString,
        )


class NlpServicer(object):
  """The nlp service definition.
  """

  def WordSegment(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PosTag(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def NamedIdentityRecognize(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def OrgMatcher(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Dependency(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def EntityLink(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CompanySegment(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Bid(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def EventExtract(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_NlpServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'WordSegment': grpc.unary_unary_rpc_method_handler(
          servicer.WordSegment,
          request_deserializer=nlp__pb2.SentenceRequest.FromString,
          response_serializer=nlp__pb2.SentenceReply.SerializeToString,
      ),
      'PosTag': grpc.unary_unary_rpc_method_handler(
          servicer.PosTag,
          request_deserializer=nlp__pb2.SentenceRequest.FromString,
          response_serializer=nlp__pb2.SentenceReply.SerializeToString,
      ),
      'NamedIdentityRecognize': grpc.unary_unary_rpc_method_handler(
          servicer.NamedIdentityRecognize,
          request_deserializer=nlp__pb2.SentenceRequest.FromString,
          response_serializer=nlp__pb2.SentenceReply.SerializeToString,
      ),
      'OrgMatcher': grpc.unary_unary_rpc_method_handler(
          servicer.OrgMatcher,
          request_deserializer=nlp__pb2.SentenceRequest.FromString,
          response_serializer=nlp__pb2.SentenceReply.SerializeToString,
      ),
      'Dependency': grpc.unary_unary_rpc_method_handler(
          servicer.Dependency,
          request_deserializer=nlp__pb2.SentenceRequest.FromString,
          response_serializer=nlp__pb2.SentenceReply.SerializeToString,
      ),
      'EntityLink': grpc.unary_unary_rpc_method_handler(
          servicer.EntityLink,
          request_deserializer=nlp__pb2.SentenceRequest.FromString,
          response_serializer=nlp__pb2.SentenceReply.SerializeToString,
      ),
      'CompanySegment': grpc.unary_unary_rpc_method_handler(
          servicer.CompanySegment,
          request_deserializer=nlp__pb2.SentenceRequest.FromString,
          response_serializer=nlp__pb2.SentenceReply.SerializeToString,
      ),
      'Bid': grpc.unary_unary_rpc_method_handler(
          servicer.Bid,
          request_deserializer=nlp__pb2.SentenceRequest2.FromString,
          response_serializer=nlp__pb2.SentenceReply.SerializeToString,
      ),
      'EventExtract': grpc.unary_unary_rpc_method_handler(
          servicer.EventExtract,
          request_deserializer=nlp__pb2.SentenceRequest2.FromString,
          response_serializer=nlp__pb2.SentenceReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'nlp.Nlp', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
