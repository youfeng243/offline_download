#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from bdp.i_crawler.i_entity_extractor import EntityExtractorService
from bdp.i_crawler.i_entity_extractor.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  EntityResp entity_extract(PageParseInfo req)')
  print('  ResultResp reload(i32 topic_id)')
  print('  ResultResp add_extractor(string extractor_info)')
  print('  ResultResp add_topic(string topic_info)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = EntityExtractorService.Client(protocol)
transport.open()

if cmd == 'entity_extract':
  if len(args) != 1:
    print('entity_extract requires 1 args')
    sys.exit(1)
  pp.pprint(client.entity_extract(eval(args[0]),))

elif cmd == 'reload':
  if len(args) != 1:
    print('reload requires 1 args')
    sys.exit(1)
  pp.pprint(client.reload(eval(args[0]),))

elif cmd == 'add_extractor':
  if len(args) != 1:
    print('add_extractor requires 1 args')
    sys.exit(1)
  pp.pprint(client.add_extractor(args[0],))

elif cmd == 'add_topic':
  if len(args) != 1:
    print('add_topic requires 1 args')
    sys.exit(1)
  pp.pprint(client.add_topic(args[0],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
