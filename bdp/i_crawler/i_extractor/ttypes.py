#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import bdp.i_crawler.i_downloader.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ExStatus:
  kEsNotExtract = 1
  kEsSuccess = 2
  kEsFail = 3

  _VALUES_TO_NAMES = {
    1: "kEsNotExtract",
    2: "kEsSuccess",
    3: "kEsFail",
  }

  _NAMES_TO_VALUES = {
    "kEsNotExtract": 1,
    "kEsSuccess": 2,
    "kEsFail": 3,
  }

class ExFailErrorCode:
  kExFailParseRuleLimit = 1
  KExFailPageTranscoding = 2
  kExFailPageParse = 3
  kExFailParseNothing = 4
  kExFailNoContent = 5
  KExFailRequireError = 6

  _VALUES_TO_NAMES = {
    1: "kExFailParseRuleLimit",
    2: "KExFailPageTranscoding",
    3: "kExFailPageParse",
    4: "kExFailParseNothing",
    5: "kExFailNoContent",
    6: "KExFailRequireError",
  }

  _NAMES_TO_VALUES = {
    "kExFailParseRuleLimit": 1,
    "KExFailPageTranscoding": 2,
    "kExFailPageParse": 3,
    "kExFailParseNothing": 4,
    "kExFailNoContent": 5,
    "KExFailRequireError": 6,
  }

class LinkType:
  kUnknownLink = 0
  kNavLink = 1
  kSecNavLink = 2
  kTitleLink = 3
  kSecondTitleLink = 4
  kSectionTitleLink = 5
  kContentLink = 6
  kNextPageLink = 7
  kTurnPageLink = 8
  kDownLoadLink = 9

  _VALUES_TO_NAMES = {
    0: "kUnknownLink",
    1: "kNavLink",
    2: "kSecNavLink",
    3: "kTitleLink",
    4: "kSecondTitleLink",
    5: "kSectionTitleLink",
    6: "kContentLink",
    7: "kNextPageLink",
    8: "kTurnPageLink",
    9: "kDownLoadLink",
  }

  _NAMES_TO_VALUES = {
    "kUnknownLink": 0,
    "kNavLink": 1,
    "kSecNavLink": 2,
    "kTitleLink": 3,
    "kSecondTitleLink": 4,
    "kSectionTitleLink": 5,
    "kContentLink": 6,
    "kNextPageLink": 7,
    "kTurnPageLink": 8,
    "kDownLoadLink": 9,
  }

class StructType:
  unknown_type = 0
  fail_type = 1
  index_type = 2
  content_type = 4

  _VALUES_TO_NAMES = {
    0: "unknown_type",
    1: "fail_type",
    2: "index_type",
    4: "content_type",
  }

  _NAMES_TO_VALUES = {
    "unknown_type": 0,
    "fail_type": 1,
    "index_type": 2,
    "content_type": 4,
  }


class BaseInfo:
  """
  Attributes:
   - url
   - url_id
   - site
   - site_id
   - domain
   - domain_id
   - segment_id
   - src_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'url', None, None, ), # 1
    None, # 2
    (3, TType.I64, 'url_id', None, None, ), # 3
    (4, TType.STRING, 'site', None, None, ), # 4
    (5, TType.I64, 'site_id', None, None, ), # 5
    (6, TType.STRING, 'domain', None, None, ), # 6
    (7, TType.I64, 'domain_id', None, None, ), # 7
    (8, TType.I64, 'segment_id', None, None, ), # 8
    (9, TType.STRING, 'src_type', None, None, ), # 9
  )

  def __init__(self, url=None, url_id=None, site=None, site_id=None, domain=None, domain_id=None, segment_id=None, src_type=None,):
    self.url = url
    self.url_id = url_id
    self.site = site
    self.site_id = site_id
    self.domain = domain
    self.domain_id = domain_id
    self.segment_id = segment_id
    self.src_type = src_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.url_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.site = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.site_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.domain = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.domain_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.segment_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.src_type = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BaseInfo')
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 1)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.url_id is not None:
      oprot.writeFieldBegin('url_id', TType.I64, 3)
      oprot.writeI64(self.url_id)
      oprot.writeFieldEnd()
    if self.site is not None:
      oprot.writeFieldBegin('site', TType.STRING, 4)
      oprot.writeString(self.site)
      oprot.writeFieldEnd()
    if self.site_id is not None:
      oprot.writeFieldBegin('site_id', TType.I64, 5)
      oprot.writeI64(self.site_id)
      oprot.writeFieldEnd()
    if self.domain is not None:
      oprot.writeFieldBegin('domain', TType.STRING, 6)
      oprot.writeString(self.domain)
      oprot.writeFieldEnd()
    if self.domain_id is not None:
      oprot.writeFieldBegin('domain_id', TType.I64, 7)
      oprot.writeI64(self.domain_id)
      oprot.writeFieldEnd()
    if self.segment_id is not None:
      oprot.writeFieldBegin('segment_id', TType.I64, 8)
      oprot.writeI64(self.segment_id)
      oprot.writeFieldEnd()
    if self.src_type is not None:
      oprot.writeFieldBegin('src_type', TType.STRING, 9)
      oprot.writeString(self.src_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.url is None:
      raise TProtocol.TProtocolException(message='Required field url is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.url)
    value = (value * 31) ^ hash(self.url_id)
    value = (value * 31) ^ hash(self.site)
    value = (value * 31) ^ hash(self.site_id)
    value = (value * 31) ^ hash(self.domain)
    value = (value * 31) ^ hash(self.domain_id)
    value = (value * 31) ^ hash(self.segment_id)
    value = (value * 31) ^ hash(self.src_type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CrawlInfo:
  """
  Attributes:
   - status_code
   - http_code
   - download_time
   - redirect_url
   - elapsed
   - content_type
   - content
   - page_size
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'status_code', None, None, ), # 1
    (2, TType.I32, 'http_code', None, None, ), # 2
    (3, TType.I32, 'download_time', None, None, ), # 3
    (4, TType.STRING, 'redirect_url', None, None, ), # 4
    (5, TType.I32, 'elapsed', None, None, ), # 5
    (6, TType.STRING, 'content_type', None, None, ), # 6
    (7, TType.STRING, 'content', None, None, ), # 7
    (8, TType.I32, 'page_size', None, None, ), # 8
  )

  def __init__(self, status_code=None, http_code=None, download_time=None, redirect_url=None, elapsed=None, content_type=None, content=None, page_size=None,):
    self.status_code = status_code
    self.http_code = http_code
    self.download_time = download_time
    self.redirect_url = redirect_url
    self.elapsed = elapsed
    self.content_type = content_type
    self.content = content
    self.page_size = page_size

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.status_code = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.http_code = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.download_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.redirect_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.elapsed = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.content_type = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.content = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.page_size = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CrawlInfo')
    if self.status_code is not None:
      oprot.writeFieldBegin('status_code', TType.I32, 1)
      oprot.writeI32(self.status_code)
      oprot.writeFieldEnd()
    if self.http_code is not None:
      oprot.writeFieldBegin('http_code', TType.I32, 2)
      oprot.writeI32(self.http_code)
      oprot.writeFieldEnd()
    if self.download_time is not None:
      oprot.writeFieldBegin('download_time', TType.I32, 3)
      oprot.writeI32(self.download_time)
      oprot.writeFieldEnd()
    if self.redirect_url is not None:
      oprot.writeFieldBegin('redirect_url', TType.STRING, 4)
      oprot.writeString(self.redirect_url)
      oprot.writeFieldEnd()
    if self.elapsed is not None:
      oprot.writeFieldBegin('elapsed', TType.I32, 5)
      oprot.writeI32(self.elapsed)
      oprot.writeFieldEnd()
    if self.content_type is not None:
      oprot.writeFieldBegin('content_type', TType.STRING, 6)
      oprot.writeString(self.content_type)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 7)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.page_size is not None:
      oprot.writeFieldBegin('page_size', TType.I32, 8)
      oprot.writeI32(self.page_size)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.status_code)
    value = (value * 31) ^ hash(self.http_code)
    value = (value * 31) ^ hash(self.download_time)
    value = (value * 31) ^ hash(self.redirect_url)
    value = (value * 31) ^ hash(self.elapsed)
    value = (value * 31) ^ hash(self.content_type)
    value = (value * 31) ^ hash(self.content)
    value = (value * 31) ^ hash(self.page_size)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Link:
  """
  Attributes:
   - url
   - url_id
   - site
   - site_id
   - domain
   - domain_id
   - segment_id
   - anchor
   - type
   - parse_extends
   - is_new
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'url', None, None, ), # 1
    (2, TType.I64, 'url_id', None, None, ), # 2
    (3, TType.STRING, 'site', None, None, ), # 3
    (4, TType.I64, 'site_id', None, None, ), # 4
    (5, TType.STRING, 'domain', None, None, ), # 5
    (6, TType.I64, 'domain_id', None, None, ), # 6
    (7, TType.I64, 'segment_id', None, None, ), # 7
    (8, TType.STRING, 'anchor', None, None, ), # 8
    (9, TType.I32, 'type', None, None, ), # 9
    (10, TType.STRING, 'parse_extends', None, None, ), # 10
    (11, TType.BOOL, 'is_new', None, None, ), # 11
  )

  def __init__(self, url=None, url_id=None, site=None, site_id=None, domain=None, domain_id=None, segment_id=None, anchor=None, type=None, parse_extends=None, is_new=None,):
    self.url = url
    self.url_id = url_id
    self.site = site
    self.site_id = site_id
    self.domain = domain
    self.domain_id = domain_id
    self.segment_id = segment_id
    self.anchor = anchor
    self.type = type
    self.parse_extends = parse_extends
    self.is_new = is_new

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.url_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.site = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.site_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.domain = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.domain_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.segment_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.anchor = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.parse_extends = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.is_new = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Link')
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 1)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.url_id is not None:
      oprot.writeFieldBegin('url_id', TType.I64, 2)
      oprot.writeI64(self.url_id)
      oprot.writeFieldEnd()
    if self.site is not None:
      oprot.writeFieldBegin('site', TType.STRING, 3)
      oprot.writeString(self.site)
      oprot.writeFieldEnd()
    if self.site_id is not None:
      oprot.writeFieldBegin('site_id', TType.I64, 4)
      oprot.writeI64(self.site_id)
      oprot.writeFieldEnd()
    if self.domain is not None:
      oprot.writeFieldBegin('domain', TType.STRING, 5)
      oprot.writeString(self.domain)
      oprot.writeFieldEnd()
    if self.domain_id is not None:
      oprot.writeFieldBegin('domain_id', TType.I64, 6)
      oprot.writeI64(self.domain_id)
      oprot.writeFieldEnd()
    if self.segment_id is not None:
      oprot.writeFieldBegin('segment_id', TType.I64, 7)
      oprot.writeI64(self.segment_id)
      oprot.writeFieldEnd()
    if self.anchor is not None:
      oprot.writeFieldBegin('anchor', TType.STRING, 8)
      oprot.writeString(self.anchor)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 9)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.parse_extends is not None:
      oprot.writeFieldBegin('parse_extends', TType.STRING, 10)
      oprot.writeString(self.parse_extends)
      oprot.writeFieldEnd()
    if self.is_new is not None:
      oprot.writeFieldBegin('is_new', TType.BOOL, 11)
      oprot.writeBool(self.is_new)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.url is None:
      raise TProtocol.TProtocolException(message='Required field url is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.url)
    value = (value * 31) ^ hash(self.url_id)
    value = (value * 31) ^ hash(self.site)
    value = (value * 31) ^ hash(self.site_id)
    value = (value * 31) ^ hash(self.domain)
    value = (value * 31) ^ hash(self.domain_id)
    value = (value * 31) ^ hash(self.segment_id)
    value = (value * 31) ^ hash(self.anchor)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.parse_extends)
    value = (value * 31) ^ hash(self.is_new)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExtractInfo:
  """
  Attributes:
   - ex_status
   - extract_error
   - redirect_url
   - next_page_type
   - struct_type
   - compose_type
   - content_type
   - topic_id
   - extracted_body_time
   - content_time
   - html_tag_title
   - analyse_title
   - zone
   - page_text
   - content_language
   - second_navigate
   - valid_pic_url
   - digest
   - finger_feature
   - content_finger
   - simhash_finger
   - link_finger
   - links
   - extract_data
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'ex_status', None, None, ), # 1
    (2, TType.I32, 'extract_error', None, None, ), # 2
    (3, TType.STRING, 'redirect_url', None, None, ), # 3
    (4, TType.BOOL, 'next_page_type', None, None, ), # 4
    (5, TType.I32, 'struct_type', None, None, ), # 5
    (6, TType.I32, 'compose_type', None, None, ), # 6
    (7, TType.I32, 'content_type', None, None, ), # 7
    (8, TType.I32, 'topic_id', None, None, ), # 8
    (9, TType.I32, 'extracted_body_time', None, None, ), # 9
    (10, TType.I32, 'content_time', None, None, ), # 10
    (11, TType.STRING, 'html_tag_title', None, None, ), # 11
    (12, TType.STRING, 'analyse_title', None, None, ), # 12
    (13, TType.STRING, 'zone', None, None, ), # 13
    (14, TType.STRING, 'page_text', None, None, ), # 14
    (15, TType.STRING, 'content_language', None, None, ), # 15
    (16, TType.STRING, 'second_navigate', None, None, ), # 16
    (17, TType.STRING, 'valid_pic_url', None, None, ), # 17
    (18, TType.STRING, 'digest', None, None, ), # 18
    (19, TType.STRING, 'finger_feature', None, None, ), # 19
    (20, TType.I64, 'content_finger', None, None, ), # 20
    (21, TType.I64, 'simhash_finger', None, None, ), # 21
    (22, TType.I64, 'link_finger', None, None, ), # 22
    (23, TType.LIST, 'links', (TType.STRUCT,(Link, Link.thrift_spec)), None, ), # 23
    (24, TType.STRING, 'extract_data', None, None, ), # 24
  )

  def __init__(self, ex_status=None, extract_error=None, redirect_url=None, next_page_type=None, struct_type=None, compose_type=None, content_type=None, topic_id=None, extracted_body_time=None, content_time=None, html_tag_title=None, analyse_title=None, zone=None, page_text=None, content_language=None, second_navigate=None, valid_pic_url=None, digest=None, finger_feature=None, content_finger=None, simhash_finger=None, link_finger=None, links=None, extract_data=None,):
    self.ex_status = ex_status
    self.extract_error = extract_error
    self.redirect_url = redirect_url
    self.next_page_type = next_page_type
    self.struct_type = struct_type
    self.compose_type = compose_type
    self.content_type = content_type
    self.topic_id = topic_id
    self.extracted_body_time = extracted_body_time
    self.content_time = content_time
    self.html_tag_title = html_tag_title
    self.analyse_title = analyse_title
    self.zone = zone
    self.page_text = page_text
    self.content_language = content_language
    self.second_navigate = second_navigate
    self.valid_pic_url = valid_pic_url
    self.digest = digest
    self.finger_feature = finger_feature
    self.content_finger = content_finger
    self.simhash_finger = simhash_finger
    self.link_finger = link_finger
    self.links = links
    self.extract_data = extract_data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.ex_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.extract_error = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.redirect_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.next_page_type = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.struct_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.compose_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.content_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.topic_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.extracted_body_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.content_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.html_tag_title = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.analyse_title = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.zone = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.page_text = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.content_language = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.second_navigate = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.valid_pic_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.digest = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.finger_feature = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.content_finger = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.simhash_finger = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I64:
          self.link_finger = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.LIST:
          self.links = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = Link()
            _elem5.read(iprot)
            self.links.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.extract_data = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExtractInfo')
    if self.ex_status is not None:
      oprot.writeFieldBegin('ex_status', TType.I32, 1)
      oprot.writeI32(self.ex_status)
      oprot.writeFieldEnd()
    if self.extract_error is not None:
      oprot.writeFieldBegin('extract_error', TType.I32, 2)
      oprot.writeI32(self.extract_error)
      oprot.writeFieldEnd()
    if self.redirect_url is not None:
      oprot.writeFieldBegin('redirect_url', TType.STRING, 3)
      oprot.writeString(self.redirect_url)
      oprot.writeFieldEnd()
    if self.next_page_type is not None:
      oprot.writeFieldBegin('next_page_type', TType.BOOL, 4)
      oprot.writeBool(self.next_page_type)
      oprot.writeFieldEnd()
    if self.struct_type is not None:
      oprot.writeFieldBegin('struct_type', TType.I32, 5)
      oprot.writeI32(self.struct_type)
      oprot.writeFieldEnd()
    if self.compose_type is not None:
      oprot.writeFieldBegin('compose_type', TType.I32, 6)
      oprot.writeI32(self.compose_type)
      oprot.writeFieldEnd()
    if self.content_type is not None:
      oprot.writeFieldBegin('content_type', TType.I32, 7)
      oprot.writeI32(self.content_type)
      oprot.writeFieldEnd()
    if self.topic_id is not None:
      oprot.writeFieldBegin('topic_id', TType.I32, 8)
      oprot.writeI32(self.topic_id)
      oprot.writeFieldEnd()
    if self.extracted_body_time is not None:
      oprot.writeFieldBegin('extracted_body_time', TType.I32, 9)
      oprot.writeI32(self.extracted_body_time)
      oprot.writeFieldEnd()
    if self.content_time is not None:
      oprot.writeFieldBegin('content_time', TType.I32, 10)
      oprot.writeI32(self.content_time)
      oprot.writeFieldEnd()
    if self.html_tag_title is not None:
      oprot.writeFieldBegin('html_tag_title', TType.STRING, 11)
      oprot.writeString(self.html_tag_title)
      oprot.writeFieldEnd()
    if self.analyse_title is not None:
      oprot.writeFieldBegin('analyse_title', TType.STRING, 12)
      oprot.writeString(self.analyse_title)
      oprot.writeFieldEnd()
    if self.zone is not None:
      oprot.writeFieldBegin('zone', TType.STRING, 13)
      oprot.writeString(self.zone)
      oprot.writeFieldEnd()
    if self.page_text is not None:
      oprot.writeFieldBegin('page_text', TType.STRING, 14)
      oprot.writeString(self.page_text)
      oprot.writeFieldEnd()
    if self.content_language is not None:
      oprot.writeFieldBegin('content_language', TType.STRING, 15)
      oprot.writeString(self.content_language)
      oprot.writeFieldEnd()
    if self.second_navigate is not None:
      oprot.writeFieldBegin('second_navigate', TType.STRING, 16)
      oprot.writeString(self.second_navigate)
      oprot.writeFieldEnd()
    if self.valid_pic_url is not None:
      oprot.writeFieldBegin('valid_pic_url', TType.STRING, 17)
      oprot.writeString(self.valid_pic_url)
      oprot.writeFieldEnd()
    if self.digest is not None:
      oprot.writeFieldBegin('digest', TType.STRING, 18)
      oprot.writeString(self.digest)
      oprot.writeFieldEnd()
    if self.finger_feature is not None:
      oprot.writeFieldBegin('finger_feature', TType.STRING, 19)
      oprot.writeString(self.finger_feature)
      oprot.writeFieldEnd()
    if self.content_finger is not None:
      oprot.writeFieldBegin('content_finger', TType.I64, 20)
      oprot.writeI64(self.content_finger)
      oprot.writeFieldEnd()
    if self.simhash_finger is not None:
      oprot.writeFieldBegin('simhash_finger', TType.I64, 21)
      oprot.writeI64(self.simhash_finger)
      oprot.writeFieldEnd()
    if self.link_finger is not None:
      oprot.writeFieldBegin('link_finger', TType.I64, 22)
      oprot.writeI64(self.link_finger)
      oprot.writeFieldEnd()
    if self.links is not None:
      oprot.writeFieldBegin('links', TType.LIST, 23)
      oprot.writeListBegin(TType.STRUCT, len(self.links))
      for iter6 in self.links:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.extract_data is not None:
      oprot.writeFieldBegin('extract_data', TType.STRING, 24)
      oprot.writeString(self.extract_data)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.ex_status is None:
      raise TProtocol.TProtocolException(message='Required field ex_status is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex_status)
    value = (value * 31) ^ hash(self.extract_error)
    value = (value * 31) ^ hash(self.redirect_url)
    value = (value * 31) ^ hash(self.next_page_type)
    value = (value * 31) ^ hash(self.struct_type)
    value = (value * 31) ^ hash(self.compose_type)
    value = (value * 31) ^ hash(self.content_type)
    value = (value * 31) ^ hash(self.topic_id)
    value = (value * 31) ^ hash(self.extracted_body_time)
    value = (value * 31) ^ hash(self.content_time)
    value = (value * 31) ^ hash(self.html_tag_title)
    value = (value * 31) ^ hash(self.analyse_title)
    value = (value * 31) ^ hash(self.zone)
    value = (value * 31) ^ hash(self.page_text)
    value = (value * 31) ^ hash(self.content_language)
    value = (value * 31) ^ hash(self.second_navigate)
    value = (value * 31) ^ hash(self.valid_pic_url)
    value = (value * 31) ^ hash(self.digest)
    value = (value * 31) ^ hash(self.finger_feature)
    value = (value * 31) ^ hash(self.content_finger)
    value = (value * 31) ^ hash(self.simhash_finger)
    value = (value * 31) ^ hash(self.link_finger)
    value = (value * 31) ^ hash(self.links)
    value = (value * 31) ^ hash(self.extract_data)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PageParseInfo:
  """
  Attributes:
   - base_info
   - crawl_info
   - extract_info
   - scheduler
   - parse_extends
   - data_extends
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'base_info', (BaseInfo, BaseInfo.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'crawl_info', (CrawlInfo, CrawlInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'extract_info', (ExtractInfo, ExtractInfo.thrift_spec), None, ), # 3
    (4, TType.STRING, 'scheduler', None, None, ), # 4
    (5, TType.STRING, 'parse_extends', None, None, ), # 5
    (6, TType.STRING, 'data_extends', None, None, ), # 6
  )

  def __init__(self, base_info=None, crawl_info=None, extract_info=None, scheduler=None, parse_extends=None, data_extends=None,):
    self.base_info = base_info
    self.crawl_info = crawl_info
    self.extract_info = extract_info
    self.scheduler = scheduler
    self.parse_extends = parse_extends
    self.data_extends = data_extends

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.base_info = BaseInfo()
          self.base_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.crawl_info = CrawlInfo()
          self.crawl_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.extract_info = ExtractInfo()
          self.extract_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.scheduler = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.parse_extends = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.data_extends = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PageParseInfo')
    if self.base_info is not None:
      oprot.writeFieldBegin('base_info', TType.STRUCT, 1)
      self.base_info.write(oprot)
      oprot.writeFieldEnd()
    if self.crawl_info is not None:
      oprot.writeFieldBegin('crawl_info', TType.STRUCT, 2)
      self.crawl_info.write(oprot)
      oprot.writeFieldEnd()
    if self.extract_info is not None:
      oprot.writeFieldBegin('extract_info', TType.STRUCT, 3)
      self.extract_info.write(oprot)
      oprot.writeFieldEnd()
    if self.scheduler is not None:
      oprot.writeFieldBegin('scheduler', TType.STRING, 4)
      oprot.writeString(self.scheduler)
      oprot.writeFieldEnd()
    if self.parse_extends is not None:
      oprot.writeFieldBegin('parse_extends', TType.STRING, 5)
      oprot.writeString(self.parse_extends)
      oprot.writeFieldEnd()
    if self.data_extends is not None:
      oprot.writeFieldBegin('data_extends', TType.STRING, 6)
      oprot.writeString(self.data_extends)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.base_info)
    value = (value * 31) ^ hash(self.crawl_info)
    value = (value * 31) ^ hash(self.extract_info)
    value = (value * 31) ^ hash(self.scheduler)
    value = (value * 31) ^ hash(self.parse_extends)
    value = (value * 31) ^ hash(self.data_extends)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExtractRsp:
  """
  Attributes:
   - status
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'status', None, "", ), # 1
    (2, TType.STRING, 'message', None, "", ), # 2
  )

  def __init__(self, status=thrift_spec[1][4], message=thrift_spec[2][4],):
    self.status = status
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.status = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExtractRsp')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 1)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
