#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import bdp.i_crawler.i_extractor.ttypes
import bdp.i_crawler.i_downloader.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class CrawlInfo:
  """
  Attributes:
   - status_code
   - http_code
   - schedule_time
   - download_time
   - redirect_url
   - elapsed
   - content_type
   - page_size
   - seed_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'status_code', None, None, ), # 1
    (2, TType.I32, 'http_code', None, None, ), # 2
    (3, TType.I32, 'schedule_time', None, None, ), # 3
    (4, TType.I32, 'download_time', None, None, ), # 4
    (5, TType.STRING, 'redirect_url', None, None, ), # 5
    (6, TType.I32, 'elapsed', None, None, ), # 6
    (7, TType.STRING, 'content_type', None, None, ), # 7
    (8, TType.I32, 'page_size', None, None, ), # 8
    (9, TType.I32, 'seed_id', None, None, ), # 9
  )

  def __init__(self, status_code=None, http_code=None, schedule_time=None, download_time=None, redirect_url=None, elapsed=None, content_type=None, page_size=None, seed_id=None,):
    self.status_code = status_code
    self.http_code = http_code
    self.schedule_time = schedule_time
    self.download_time = download_time
    self.redirect_url = redirect_url
    self.elapsed = elapsed
    self.content_type = content_type
    self.page_size = page_size
    self.seed_id = seed_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.status_code = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.http_code = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.schedule_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.download_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.redirect_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.elapsed = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.content_type = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.page_size = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.seed_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CrawlInfo')
    if self.status_code is not None:
      oprot.writeFieldBegin('status_code', TType.I32, 1)
      oprot.writeI32(self.status_code)
      oprot.writeFieldEnd()
    if self.http_code is not None:
      oprot.writeFieldBegin('http_code', TType.I32, 2)
      oprot.writeI32(self.http_code)
      oprot.writeFieldEnd()
    if self.schedule_time is not None:
      oprot.writeFieldBegin('schedule_time', TType.I32, 3)
      oprot.writeI32(self.schedule_time)
      oprot.writeFieldEnd()
    if self.download_time is not None:
      oprot.writeFieldBegin('download_time', TType.I32, 4)
      oprot.writeI32(self.download_time)
      oprot.writeFieldEnd()
    if self.redirect_url is not None:
      oprot.writeFieldBegin('redirect_url', TType.STRING, 5)
      oprot.writeString(self.redirect_url)
      oprot.writeFieldEnd()
    if self.elapsed is not None:
      oprot.writeFieldBegin('elapsed', TType.I32, 6)
      oprot.writeI32(self.elapsed)
      oprot.writeFieldEnd()
    if self.content_type is not None:
      oprot.writeFieldBegin('content_type', TType.STRING, 7)
      oprot.writeString(self.content_type)
      oprot.writeFieldEnd()
    if self.page_size is not None:
      oprot.writeFieldBegin('page_size', TType.I32, 8)
      oprot.writeI32(self.page_size)
      oprot.writeFieldEnd()
    if self.seed_id is not None:
      oprot.writeFieldBegin('seed_id', TType.I32, 9)
      oprot.writeI32(self.seed_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.status_code)
    value = (value * 31) ^ hash(self.http_code)
    value = (value * 31) ^ hash(self.schedule_time)
    value = (value * 31) ^ hash(self.download_time)
    value = (value * 31) ^ hash(self.redirect_url)
    value = (value * 31) ^ hash(self.elapsed)
    value = (value * 31) ^ hash(self.content_type)
    value = (value * 31) ^ hash(self.page_size)
    value = (value * 31) ^ hash(self.seed_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PageInfo:
  """
  Attributes:
   - content_finger
   - link_finger
   - inner_link_finger
   - page_size
   - page_type
   - page_struct
   - inner_links_num
   - outer_links_num
   - new_links_num_for_self
   - good_links_num_for_for_self
   - new_links_num_for_all
   - good_links_num_for_all
   - dead_page_type
   - dead_page_time
   - real_title
   - analyse_title
   - content_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'content_finger', None, None, ), # 1
    (2, TType.I64, 'link_finger', None, None, ), # 2
    (3, TType.I64, 'inner_link_finger', None, None, ), # 3
    (4, TType.I32, 'page_size', None, None, ), # 4
    (5, TType.I32, 'page_type', None, None, ), # 5
    (6, TType.I32, 'page_struct', None, None, ), # 6
    None, # 7
    None, # 8
    (9, TType.I32, 'inner_links_num', None, None, ), # 9
    (10, TType.I32, 'outer_links_num', None, None, ), # 10
    (11, TType.I32, 'new_links_num_for_self', None, None, ), # 11
    (12, TType.I32, 'good_links_num_for_for_self', None, None, ), # 12
    (13, TType.I32, 'new_links_num_for_all', None, None, ), # 13
    (14, TType.I32, 'good_links_num_for_all', None, None, ), # 14
    (15, TType.I32, 'dead_page_type', None, None, ), # 15
    (16, TType.I32, 'dead_page_time', None, None, ), # 16
    (17, TType.STRING, 'real_title', None, None, ), # 17
    (18, TType.STRING, 'analyse_title', None, None, ), # 18
    (19, TType.I32, 'content_time', None, None, ), # 19
  )

  def __init__(self, content_finger=None, link_finger=None, inner_link_finger=None, page_size=None, page_type=None, page_struct=None, inner_links_num=None, outer_links_num=None, new_links_num_for_self=None, good_links_num_for_for_self=None, new_links_num_for_all=None, good_links_num_for_all=None, dead_page_type=None, dead_page_time=None, real_title=None, analyse_title=None, content_time=None,):
    self.content_finger = content_finger
    self.link_finger = link_finger
    self.inner_link_finger = inner_link_finger
    self.page_size = page_size
    self.page_type = page_type
    self.page_struct = page_struct
    self.inner_links_num = inner_links_num
    self.outer_links_num = outer_links_num
    self.new_links_num_for_self = new_links_num_for_self
    self.good_links_num_for_for_self = good_links_num_for_for_self
    self.new_links_num_for_all = new_links_num_for_all
    self.good_links_num_for_all = good_links_num_for_all
    self.dead_page_type = dead_page_type
    self.dead_page_time = dead_page_time
    self.real_title = real_title
    self.analyse_title = analyse_title
    self.content_time = content_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.content_finger = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.link_finger = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.inner_link_finger = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.page_size = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.page_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.page_struct = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.inner_links_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.outer_links_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.new_links_num_for_self = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.good_links_num_for_for_self = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.new_links_num_for_all = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.good_links_num_for_all = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.dead_page_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.dead_page_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.real_title = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.analyse_title = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.content_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PageInfo')
    if self.content_finger is not None:
      oprot.writeFieldBegin('content_finger', TType.I64, 1)
      oprot.writeI64(self.content_finger)
      oprot.writeFieldEnd()
    if self.link_finger is not None:
      oprot.writeFieldBegin('link_finger', TType.I64, 2)
      oprot.writeI64(self.link_finger)
      oprot.writeFieldEnd()
    if self.inner_link_finger is not None:
      oprot.writeFieldBegin('inner_link_finger', TType.I64, 3)
      oprot.writeI64(self.inner_link_finger)
      oprot.writeFieldEnd()
    if self.page_size is not None:
      oprot.writeFieldBegin('page_size', TType.I32, 4)
      oprot.writeI32(self.page_size)
      oprot.writeFieldEnd()
    if self.page_type is not None:
      oprot.writeFieldBegin('page_type', TType.I32, 5)
      oprot.writeI32(self.page_type)
      oprot.writeFieldEnd()
    if self.page_struct is not None:
      oprot.writeFieldBegin('page_struct', TType.I32, 6)
      oprot.writeI32(self.page_struct)
      oprot.writeFieldEnd()
    if self.inner_links_num is not None:
      oprot.writeFieldBegin('inner_links_num', TType.I32, 9)
      oprot.writeI32(self.inner_links_num)
      oprot.writeFieldEnd()
    if self.outer_links_num is not None:
      oprot.writeFieldBegin('outer_links_num', TType.I32, 10)
      oprot.writeI32(self.outer_links_num)
      oprot.writeFieldEnd()
    if self.new_links_num_for_self is not None:
      oprot.writeFieldBegin('new_links_num_for_self', TType.I32, 11)
      oprot.writeI32(self.new_links_num_for_self)
      oprot.writeFieldEnd()
    if self.good_links_num_for_for_self is not None:
      oprot.writeFieldBegin('good_links_num_for_for_self', TType.I32, 12)
      oprot.writeI32(self.good_links_num_for_for_self)
      oprot.writeFieldEnd()
    if self.new_links_num_for_all is not None:
      oprot.writeFieldBegin('new_links_num_for_all', TType.I32, 13)
      oprot.writeI32(self.new_links_num_for_all)
      oprot.writeFieldEnd()
    if self.good_links_num_for_all is not None:
      oprot.writeFieldBegin('good_links_num_for_all', TType.I32, 14)
      oprot.writeI32(self.good_links_num_for_all)
      oprot.writeFieldEnd()
    if self.dead_page_type is not None:
      oprot.writeFieldBegin('dead_page_type', TType.I32, 15)
      oprot.writeI32(self.dead_page_type)
      oprot.writeFieldEnd()
    if self.dead_page_time is not None:
      oprot.writeFieldBegin('dead_page_time', TType.I32, 16)
      oprot.writeI32(self.dead_page_time)
      oprot.writeFieldEnd()
    if self.real_title is not None:
      oprot.writeFieldBegin('real_title', TType.STRING, 17)
      oprot.writeString(self.real_title)
      oprot.writeFieldEnd()
    if self.analyse_title is not None:
      oprot.writeFieldBegin('analyse_title', TType.STRING, 18)
      oprot.writeString(self.analyse_title)
      oprot.writeFieldEnd()
    if self.content_time is not None:
      oprot.writeFieldBegin('content_time', TType.I32, 19)
      oprot.writeI32(self.content_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.content_finger)
    value = (value * 31) ^ hash(self.link_finger)
    value = (value * 31) ^ hash(self.inner_link_finger)
    value = (value * 31) ^ hash(self.page_size)
    value = (value * 31) ^ hash(self.page_type)
    value = (value * 31) ^ hash(self.page_struct)
    value = (value * 31) ^ hash(self.inner_links_num)
    value = (value * 31) ^ hash(self.outer_links_num)
    value = (value * 31) ^ hash(self.new_links_num_for_self)
    value = (value * 31) ^ hash(self.good_links_num_for_for_self)
    value = (value * 31) ^ hash(self.new_links_num_for_all)
    value = (value * 31) ^ hash(self.good_links_num_for_all)
    value = (value * 31) ^ hash(self.dead_page_type)
    value = (value * 31) ^ hash(self.dead_page_time)
    value = (value * 31) ^ hash(self.real_title)
    value = (value * 31) ^ hash(self.analyse_title)
    value = (value * 31) ^ hash(self.content_time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ParentInfo:
  """
  Attributes:
   - depth
   - parent_page
   - parent_page_type
   - parent_download_time
   - anchor
   - analyse_title
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'depth', None, None, ), # 1
    (2, TType.STRING, 'parent_page', None, None, ), # 2
    (3, TType.I32, 'parent_page_type', None, None, ), # 3
    (4, TType.I32, 'parent_download_time', None, None, ), # 4
    (5, TType.STRING, 'anchor', None, None, ), # 5
    (6, TType.STRING, 'analyse_title', None, None, ), # 6
  )

  def __init__(self, depth=None, parent_page=None, parent_page_type=None, parent_download_time=None, anchor=None, analyse_title=None,):
    self.depth = depth
    self.parent_page = parent_page
    self.parent_page_type = parent_page_type
    self.parent_download_time = parent_download_time
    self.anchor = anchor
    self.analyse_title = analyse_title

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.depth = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.parent_page = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.parent_page_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.parent_download_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.anchor = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.analyse_title = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ParentInfo')
    if self.depth is not None:
      oprot.writeFieldBegin('depth', TType.I32, 1)
      oprot.writeI32(self.depth)
      oprot.writeFieldEnd()
    if self.parent_page is not None:
      oprot.writeFieldBegin('parent_page', TType.STRING, 2)
      oprot.writeString(self.parent_page)
      oprot.writeFieldEnd()
    if self.parent_page_type is not None:
      oprot.writeFieldBegin('parent_page_type', TType.I32, 3)
      oprot.writeI32(self.parent_page_type)
      oprot.writeFieldEnd()
    if self.parent_download_time is not None:
      oprot.writeFieldBegin('parent_download_time', TType.I32, 4)
      oprot.writeI32(self.parent_download_time)
      oprot.writeFieldEnd()
    if self.anchor is not None:
      oprot.writeFieldBegin('anchor', TType.STRING, 5)
      oprot.writeString(self.anchor)
      oprot.writeFieldEnd()
    if self.analyse_title is not None:
      oprot.writeFieldBegin('analyse_title', TType.STRING, 6)
      oprot.writeString(self.analyse_title)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.depth)
    value = (value * 31) ^ hash(self.parent_page)
    value = (value * 31) ^ hash(self.parent_page_type)
    value = (value * 31) ^ hash(self.parent_download_time)
    value = (value * 31) ^ hash(self.anchor)
    value = (value * 31) ^ hash(self.analyse_title)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CrawlHistory:
  """
  Attributes:
   - download_time
   - status_code
   - http_code
   - content_finger
   - link_finger
   - inner_link_finger
   - page_size
   - page_type
   - inner_links_num
   - outer_links_num
   - new_links_num_for_self
   - good_links_num_for_for_self
   - new_links_num_for_all
   - good_links_num_for_all
   - dead_page_type
   - dead_page_time
   - real_title
   - analyse_title
   - content_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'download_time', None, None, ), # 1
    (2, TType.I32, 'status_code', None, None, ), # 2
    (3, TType.I32, 'http_code', None, None, ), # 3
    (4, TType.I64, 'content_finger', None, None, ), # 4
    (5, TType.I64, 'link_finger', None, None, ), # 5
    (6, TType.I64, 'inner_link_finger', None, None, ), # 6
    (7, TType.I32, 'page_size', None, None, ), # 7
    (8, TType.I32, 'page_type', None, None, ), # 8
    (9, TType.I32, 'inner_links_num', None, None, ), # 9
    (10, TType.I32, 'outer_links_num', None, None, ), # 10
    (11, TType.I32, 'new_links_num_for_self', None, None, ), # 11
    (12, TType.I32, 'good_links_num_for_for_self', None, None, ), # 12
    (13, TType.I32, 'new_links_num_for_all', None, None, ), # 13
    (14, TType.I32, 'good_links_num_for_all', None, None, ), # 14
    (15, TType.I32, 'dead_page_type', None, None, ), # 15
    (16, TType.I32, 'dead_page_time', None, None, ), # 16
    (17, TType.STRING, 'real_title', None, None, ), # 17
    (18, TType.STRING, 'analyse_title', None, None, ), # 18
    (19, TType.I32, 'content_time', None, None, ), # 19
  )

  def __init__(self, download_time=None, status_code=None, http_code=None, content_finger=None, link_finger=None, inner_link_finger=None, page_size=None, page_type=None, inner_links_num=None, outer_links_num=None, new_links_num_for_self=None, good_links_num_for_for_self=None, new_links_num_for_all=None, good_links_num_for_all=None, dead_page_type=None, dead_page_time=None, real_title=None, analyse_title=None, content_time=None,):
    self.download_time = download_time
    self.status_code = status_code
    self.http_code = http_code
    self.content_finger = content_finger
    self.link_finger = link_finger
    self.inner_link_finger = inner_link_finger
    self.page_size = page_size
    self.page_type = page_type
    self.inner_links_num = inner_links_num
    self.outer_links_num = outer_links_num
    self.new_links_num_for_self = new_links_num_for_self
    self.good_links_num_for_for_self = good_links_num_for_for_self
    self.new_links_num_for_all = new_links_num_for_all
    self.good_links_num_for_all = good_links_num_for_all
    self.dead_page_type = dead_page_type
    self.dead_page_time = dead_page_time
    self.real_title = real_title
    self.analyse_title = analyse_title
    self.content_time = content_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.download_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.status_code = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.http_code = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.content_finger = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.link_finger = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.inner_link_finger = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.page_size = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.page_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.inner_links_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.outer_links_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.new_links_num_for_self = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.good_links_num_for_for_self = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.new_links_num_for_all = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.good_links_num_for_all = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.dead_page_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.dead_page_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.real_title = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.analyse_title = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.content_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CrawlHistory')
    if self.download_time is not None:
      oprot.writeFieldBegin('download_time', TType.I32, 1)
      oprot.writeI32(self.download_time)
      oprot.writeFieldEnd()
    if self.status_code is not None:
      oprot.writeFieldBegin('status_code', TType.I32, 2)
      oprot.writeI32(self.status_code)
      oprot.writeFieldEnd()
    if self.http_code is not None:
      oprot.writeFieldBegin('http_code', TType.I32, 3)
      oprot.writeI32(self.http_code)
      oprot.writeFieldEnd()
    if self.content_finger is not None:
      oprot.writeFieldBegin('content_finger', TType.I64, 4)
      oprot.writeI64(self.content_finger)
      oprot.writeFieldEnd()
    if self.link_finger is not None:
      oprot.writeFieldBegin('link_finger', TType.I64, 5)
      oprot.writeI64(self.link_finger)
      oprot.writeFieldEnd()
    if self.inner_link_finger is not None:
      oprot.writeFieldBegin('inner_link_finger', TType.I64, 6)
      oprot.writeI64(self.inner_link_finger)
      oprot.writeFieldEnd()
    if self.page_size is not None:
      oprot.writeFieldBegin('page_size', TType.I32, 7)
      oprot.writeI32(self.page_size)
      oprot.writeFieldEnd()
    if self.page_type is not None:
      oprot.writeFieldBegin('page_type', TType.I32, 8)
      oprot.writeI32(self.page_type)
      oprot.writeFieldEnd()
    if self.inner_links_num is not None:
      oprot.writeFieldBegin('inner_links_num', TType.I32, 9)
      oprot.writeI32(self.inner_links_num)
      oprot.writeFieldEnd()
    if self.outer_links_num is not None:
      oprot.writeFieldBegin('outer_links_num', TType.I32, 10)
      oprot.writeI32(self.outer_links_num)
      oprot.writeFieldEnd()
    if self.new_links_num_for_self is not None:
      oprot.writeFieldBegin('new_links_num_for_self', TType.I32, 11)
      oprot.writeI32(self.new_links_num_for_self)
      oprot.writeFieldEnd()
    if self.good_links_num_for_for_self is not None:
      oprot.writeFieldBegin('good_links_num_for_for_self', TType.I32, 12)
      oprot.writeI32(self.good_links_num_for_for_self)
      oprot.writeFieldEnd()
    if self.new_links_num_for_all is not None:
      oprot.writeFieldBegin('new_links_num_for_all', TType.I32, 13)
      oprot.writeI32(self.new_links_num_for_all)
      oprot.writeFieldEnd()
    if self.good_links_num_for_all is not None:
      oprot.writeFieldBegin('good_links_num_for_all', TType.I32, 14)
      oprot.writeI32(self.good_links_num_for_all)
      oprot.writeFieldEnd()
    if self.dead_page_type is not None:
      oprot.writeFieldBegin('dead_page_type', TType.I32, 15)
      oprot.writeI32(self.dead_page_type)
      oprot.writeFieldEnd()
    if self.dead_page_time is not None:
      oprot.writeFieldBegin('dead_page_time', TType.I32, 16)
      oprot.writeI32(self.dead_page_time)
      oprot.writeFieldEnd()
    if self.real_title is not None:
      oprot.writeFieldBegin('real_title', TType.STRING, 17)
      oprot.writeString(self.real_title)
      oprot.writeFieldEnd()
    if self.analyse_title is not None:
      oprot.writeFieldBegin('analyse_title', TType.STRING, 18)
      oprot.writeString(self.analyse_title)
      oprot.writeFieldEnd()
    if self.content_time is not None:
      oprot.writeFieldBegin('content_time', TType.I32, 19)
      oprot.writeI32(self.content_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.download_time)
    value = (value * 31) ^ hash(self.status_code)
    value = (value * 31) ^ hash(self.http_code)
    value = (value * 31) ^ hash(self.content_finger)
    value = (value * 31) ^ hash(self.link_finger)
    value = (value * 31) ^ hash(self.inner_link_finger)
    value = (value * 31) ^ hash(self.page_size)
    value = (value * 31) ^ hash(self.page_type)
    value = (value * 31) ^ hash(self.inner_links_num)
    value = (value * 31) ^ hash(self.outer_links_num)
    value = (value * 31) ^ hash(self.new_links_num_for_self)
    value = (value * 31) ^ hash(self.good_links_num_for_for_self)
    value = (value * 31) ^ hash(self.new_links_num_for_all)
    value = (value * 31) ^ hash(self.good_links_num_for_all)
    value = (value * 31) ^ hash(self.dead_page_type)
    value = (value * 31) ^ hash(self.dead_page_time)
    value = (value * 31) ^ hash(self.real_title)
    value = (value * 31) ^ hash(self.analyse_title)
    value = (value * 31) ^ hash(self.content_time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExtractMessage:
  """
  Attributes:
   - ex_status
   - topic_id
   - extract_data
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'ex_status', None, None, ), # 1
    (2, TType.I32, 'topic_id', None, None, ), # 2
    (3, TType.STRING, 'extract_data', None, None, ), # 3
  )

  def __init__(self, ex_status=None, topic_id=None, extract_data=None,):
    self.ex_status = ex_status
    self.topic_id = topic_id
    self.extract_data = extract_data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.ex_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.topic_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.extract_data = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExtractMessage')
    if self.ex_status is not None:
      oprot.writeFieldBegin('ex_status', TType.I32, 1)
      oprot.writeI32(self.ex_status)
      oprot.writeFieldEnd()
    if self.topic_id is not None:
      oprot.writeFieldBegin('topic_id', TType.I32, 2)
      oprot.writeI32(self.topic_id)
      oprot.writeFieldEnd()
    if self.extract_data is not None:
      oprot.writeFieldBegin('extract_data', TType.STRING, 3)
      oprot.writeString(self.extract_data)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.ex_status is None:
      raise TProtocol.TProtocolException(message='Required field ex_status is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ex_status)
    value = (value * 31) ^ hash(self.topic_id)
    value = (value * 31) ^ hash(self.extract_data)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LinkAttr:
  """
  Attributes:
   - url
   - url_id
   - src_type
   - found_time
   - depth
   - crawl_info
   - page_info
   - parent_info
   - normal_crawl_his
   - data_extends
   - del_reason
   - seed_id
   - sub_links
   - extract_message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'url', None, None, ), # 1
    (2, TType.I64, 'url_id', None, None, ), # 2
    (3, TType.STRING, 'src_type', None, None, ), # 3
    (4, TType.I32, 'found_time', None, None, ), # 4
    (5, TType.I32, 'depth', None, None, ), # 5
    (6, TType.STRUCT, 'crawl_info', (CrawlInfo, CrawlInfo.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'page_info', (PageInfo, PageInfo.thrift_spec), None, ), # 7
    (8, TType.STRUCT, 'parent_info', (ParentInfo, ParentInfo.thrift_spec), None, ), # 8
    (9, TType.LIST, 'normal_crawl_his', (TType.STRUCT,(CrawlHistory, CrawlHistory.thrift_spec)), None, ), # 9
    (10, TType.STRING, 'data_extends', None, None, ), # 10
    (11, TType.STRING, 'del_reason', None, None, ), # 11
    (12, TType.I32, 'seed_id', None, None, ), # 12
    (13, TType.LIST, 'sub_links', (TType.STRUCT,(bdp.i_crawler.i_extractor.ttypes.Link, bdp.i_crawler.i_extractor.ttypes.Link.thrift_spec)), None, ), # 13
    (14, TType.STRUCT, 'extract_message', (ExtractMessage, ExtractMessage.thrift_spec), None, ), # 14
  )

  def __init__(self, url=None, url_id=None, src_type=None, found_time=None, depth=None, crawl_info=None, page_info=None, parent_info=None, normal_crawl_his=None, data_extends=None, del_reason=None, seed_id=None, sub_links=None, extract_message=None,):
    self.url = url
    self.url_id = url_id
    self.src_type = src_type
    self.found_time = found_time
    self.depth = depth
    self.crawl_info = crawl_info
    self.page_info = page_info
    self.parent_info = parent_info
    self.normal_crawl_his = normal_crawl_his
    self.data_extends = data_extends
    self.del_reason = del_reason
    self.seed_id = seed_id
    self.sub_links = sub_links
    self.extract_message = extract_message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.url_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.src_type = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.found_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.depth = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.crawl_info = CrawlInfo()
          self.crawl_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.page_info = PageInfo()
          self.page_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.parent_info = ParentInfo()
          self.parent_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.normal_crawl_his = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = CrawlHistory()
            _elem5.read(iprot)
            self.normal_crawl_his.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.data_extends = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.del_reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.seed_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.sub_links = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = bdp.i_crawler.i_extractor.ttypes.Link()
            _elem11.read(iprot)
            self.sub_links.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRUCT:
          self.extract_message = ExtractMessage()
          self.extract_message.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LinkAttr')
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 1)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.url_id is not None:
      oprot.writeFieldBegin('url_id', TType.I64, 2)
      oprot.writeI64(self.url_id)
      oprot.writeFieldEnd()
    if self.src_type is not None:
      oprot.writeFieldBegin('src_type', TType.STRING, 3)
      oprot.writeString(self.src_type)
      oprot.writeFieldEnd()
    if self.found_time is not None:
      oprot.writeFieldBegin('found_time', TType.I32, 4)
      oprot.writeI32(self.found_time)
      oprot.writeFieldEnd()
    if self.depth is not None:
      oprot.writeFieldBegin('depth', TType.I32, 5)
      oprot.writeI32(self.depth)
      oprot.writeFieldEnd()
    if self.crawl_info is not None:
      oprot.writeFieldBegin('crawl_info', TType.STRUCT, 6)
      self.crawl_info.write(oprot)
      oprot.writeFieldEnd()
    if self.page_info is not None:
      oprot.writeFieldBegin('page_info', TType.STRUCT, 7)
      self.page_info.write(oprot)
      oprot.writeFieldEnd()
    if self.parent_info is not None:
      oprot.writeFieldBegin('parent_info', TType.STRUCT, 8)
      self.parent_info.write(oprot)
      oprot.writeFieldEnd()
    if self.normal_crawl_his is not None:
      oprot.writeFieldBegin('normal_crawl_his', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.normal_crawl_his))
      for iter12 in self.normal_crawl_his:
        iter12.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.data_extends is not None:
      oprot.writeFieldBegin('data_extends', TType.STRING, 10)
      oprot.writeString(self.data_extends)
      oprot.writeFieldEnd()
    if self.del_reason is not None:
      oprot.writeFieldBegin('del_reason', TType.STRING, 11)
      oprot.writeString(self.del_reason)
      oprot.writeFieldEnd()
    if self.seed_id is not None:
      oprot.writeFieldBegin('seed_id', TType.I32, 12)
      oprot.writeI32(self.seed_id)
      oprot.writeFieldEnd()
    if self.sub_links is not None:
      oprot.writeFieldBegin('sub_links', TType.LIST, 13)
      oprot.writeListBegin(TType.STRUCT, len(self.sub_links))
      for iter13 in self.sub_links:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.extract_message is not None:
      oprot.writeFieldBegin('extract_message', TType.STRUCT, 14)
      self.extract_message.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.url is None:
      raise TProtocol.TProtocolException(message='Required field url is unset!')
    if self.url_id is None:
      raise TProtocol.TProtocolException(message='Required field url_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.url)
    value = (value * 31) ^ hash(self.url_id)
    value = (value * 31) ^ hash(self.src_type)
    value = (value * 31) ^ hash(self.found_time)
    value = (value * 31) ^ hash(self.depth)
    value = (value * 31) ^ hash(self.crawl_info)
    value = (value * 31) ^ hash(self.page_info)
    value = (value * 31) ^ hash(self.parent_info)
    value = (value * 31) ^ hash(self.normal_crawl_his)
    value = (value * 31) ^ hash(self.data_extends)
    value = (value * 31) ^ hash(self.del_reason)
    value = (value * 31) ^ hash(self.seed_id)
    value = (value * 31) ^ hash(self.sub_links)
    value = (value * 31) ^ hash(self.extract_message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
